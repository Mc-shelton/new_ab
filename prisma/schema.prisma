generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}


model users{
  id          String        @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name String?
  email String @unique
  phone String? @unique
  status userStatus

  Rooms rooms[]
  UserRoom userRooms[]
  Chats chats[]
  Orders orders[]
  Activities user_activities[]
  created_at     DateTime     @default(now())
}

model user_activities{
  id          String        @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  user_id String @db.Uuid
  activity String
  timeStamp DateTime

  User users @relation(fields:[user_id], references:[id])
}
model items {
  id          String        @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name        String @unique
  price       String
  inStore     Int           @default(0)
  description String
  image_url String?

  Thumb_nails thumb_nails[]
  Orders      orderItems[]
}

model thumb_nails {
  id      String @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  item_id String @db.Uuid
  url     String
  Item    items  @relation(fields: [item_id], references: [id], onDelete: Cascade)
}

model orders {
  id             String       @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  order_id       String       @unique
  customer_id String @db.Uuid
  status   orderItemStatus @default(PENDING)

  created_at     DateTime     @default(now())
  expires_at     DateTime     @default(now())

  User users @relation(fields:[customer_id], references:[id])
  OrderItems     orderItems[]
}

model orderItems {
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  item_id  String          @db.Uuid
  order_id String 
  quantity Int             @default(1)

  Order    orders          @relation(fields: [order_id], references: [order_id])
  Item     items           @relation(fields: [item_id], references: [id])
}

model books{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  image String
  title String
  pages String?
  author String?
  type String
  description String
  url String

}

model articles{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  title String
  thumbNail String?
  category String
  avTime String
  author String?
  url String

}

model sermons{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  title String
  speaker String
  avTime String
  url String
  thumb_nail String? 
}

model events{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  title String
  image String
  description String
  organizer String
  location String
  formLink String?
  locationPin String?
  repeat String
  date DateTime
  contact String?
  created_at DateTime @default(now())
  Gallary eventsGallary[]
}

model periodicals{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name String
  title String
  type String
  avTime String
  url String?
  content String?
  thumb_nails String?
  forDate DateTime
}

model eventsGallary{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  event_id String  @db.Uuid
  url String

  Event events @relation(fields:[event_id], references:[id])

}
model rooms{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  owner_id String  @db.Uuid
  title String @unique
  ab_title String
  description String
  created_at DateTime @default(now())
  Owner users @relation(fields:[owner_id], references:[id])

  Chats chats[]
  UserRoom userRooms[]
}

model userRooms{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  user_id String @db.Uuid
  room_id String @db.Uuid

  Room rooms @relation(fields:[room_id], references:[id])
  User users @relation(fields:[user_id], references:[id])
}

model chats{
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  message String
  status chatStatus
  room_id String  @db.Uuid
  sender_id String  @db.Uuid

  Room rooms @relation(fields:[room_id], references:[id])
  Sender users @relation(fields:[sender_id],references:[id])
  created_at DateTime @default(now())
}

// Multitenancy: Ministries (tenants)
model ministries {
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name              String
  slug              String           @unique
  logo_url           String?
  primary_color      String           @default("#191970")
  secondary_color    String?           @default("#B0C4DE")
  manager_password_hash String?
  created_at         DateTime         @default(now())
  updated_at         DateTime         @default(now())

  prayerRequests    prayer_requests[]
  testimonies       testimonies[]
}

// Prayer Requests
model prayer_requests {
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  title            String
  request          String
  name             String      @default("Anonymous")
  is_anonymous      Boolean     @default(true)
  is_being_prayed_for Boolean     @default(false)
  is_ministry_focus  Boolean     @default(false)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @default(now())

  ministry_id       String? @db.Uuid
  ministry         ministries?    @relation(fields: [ministry_id], references: [id], onDelete: Cascade)

  testimonies      testimonies[]
  prayerActions    prayer_actions[]
}

// Testimonies
model testimonies {
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  content          String
  name             String      @default("Anonymous")
  is_anonymous      Boolean     @default(true)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @default(now())

  prayer_request_id  String? @db.Uuid
  prayerRequest    prayer_requests? @relation(fields: [prayer_request_id], references: [id], onDelete: SetNull)

  ministry_id       String? @db.Uuid
  ministry         ministries?    @relation(fields: [ministry_id], references: [id], onDelete: Cascade)
}

// Prayer Actions (track who prayed for what)
model prayer_actions {
  id       String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  prayed_at        DateTime       @default(now())
  session_id       String?

  prayer_request_id String? @db.Uuid
  prayerRequest   prayer_requests?  @relation(fields: [prayer_request_id], references: [id], onDelete: Cascade)
}


enum transactionStatus {
  FAILED
  PENDING
  COMPLETE
}

enum orderItemStatus {
  PENDING
  DELIVERED
}

enum chatStatus {
  PENDING
  DELIVERED
}

enum orderStatus {
  COMPLETE
  CANCELED
  PENDING
  ACCEPTED
  DECLINED
}

enum userStatus{
  BLOCKED
  ACTIVE
  DELETED
}